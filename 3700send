#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math, datetime, zlib
from json import JSONDecodeError
from re import L

DATA_SIZE = 1375
WINDOW_SIZE = 4
ALPHA = 0.875


class Sender:

    # seqnum -> time sent
    awaiting_ack = {}
    rtt_estimation = 0.1   # base rtt: 1 sec

    # seqnum -> msg
    packs = {}

    next_seqn = 0  # what we give a new packet thats being sent
    curr_acks = 0  # for window

    cwnd = 1
    current_window = 4
    ssthresh = 100
    packet_dropped = False

    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def check_timeouts(self):
        for k in self.awaiting_ack.keys():
            now = time.time()
            diff = now - self.awaiting_ack.get(k)
            retransmission_threshold = 2.0 * self.rtt_estimation
            # self.log("FOR KEY: %s" % k)
            # self.log("TIME DIFF: %s" % str(diff))
            if diff > retransmission_threshold:
                self.log("FOR KEY: %s" % k)
                self.log("TIME DIFF: %s" % str(diff))
                self.retransmit(k)

    def retransmit(self, k):
        self.log("RETRANSMITTING seqnum '%s'" % str(k))
        msg = self.packs.get(k)
        self.send(msg)
        self.awaiting_ack[k] = time.time()
        self.packet_dropped = True

        return
        
    def run(self):
        
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]

            self.check_timeouts() # check if any packs weve sent have timed out 

            for conn in socks:
                if conn == self.socket:
                    # check if its been over a sec waiting for any youve sent

                    k, addr = conn.recvfrom(65535) # get an ack

                    try:
                        msg = json.loads(k.decode('utf-8'))
                        acked_seqnum = msg["seqnum"]
                        self.log("got ack for '%s'" % acked_seqnum)
                        if acked_seqnum in self.awaiting_ack:

                            now = time.time()
                            packet_rtt = now - self.awaiting_ack.get(acked_seqnum)
                            # adjust moving average for rtt estimation based on this ack
                            new_rtt = (ALPHA * self.rtt_estimation) + ((1 - ALPHA) * packet_rtt)
                            self.log("NEW RTT EST '%s'" % new_rtt)
                            self.rtt_estimation = new_rtt


                            self.awaiting_ack.pop(acked_seqnum)
                            self.log("Received message '%s'" % msg)

                            if self.cwnd < self.ssthresh:
                                self.cwnd = self.cwnd + 1
                                self.log("CWND: %s" % self.cwnd)
                            else:
                                self.cwnd = self.cwnd + 1/self.cwnd
                                self.log("CWND: %s" % self.cwnd)

                            if self.curr_acks == self.current_window - 1:
                                self.waiting = False # done waiting
                                self.curr_acks = 0

                                if self.packet_dropped:
                                    #self.ssthresh = self.cwnd/2;
                                    self.cwnd = 1
                                    self.packet_dropped = False

                                self.current_window = self.cwnd
                                self.log("CURRENT WINDOW: %s" % self.current_window)

                            else:
                                self.curr_acks += 1

                    except JSONDecodeError:
                        self.log("JSON PACKAGE CORRUPTED ON SENDER SIDE")

                elif conn == sys.stdin: # read more data from stdin
                    for n in range(int(self.current_window)):
                        data = sys.stdin.read(DATA_SIZE)
                        
                        if len(data) == 0 and (len(self.awaiting_ack) == 0):
                            self.log("All done!")
                            sys.exit(0)

                        encoded_data = data.encode()
                        checksum = zlib.crc32(encoded_data)

                        msg = { "type": "msg", "seqnum": self.next_seqn, "checksum": checksum, "data": data}
                        self.log("Sending message '%s'" % msg)
                        self.send(msg)
                        self.awaiting_ack[self.next_seqn] = time.time()
                        self.packs[self.next_seqn] = msg
                        self.next_seqn += 1

                    self.waiting = True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
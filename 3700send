#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, sys, zlib
from json import JSONDecodeError

DATA_SIZE = 1375
ALPHA = 0.875

class Sender:
    awaiting_ack = {} # dict of seqnum -> time sent
    packs = {} # dict of seqnum -> msg

    rtt_estimation = -1.0 # round trip time estimation, will be set to the rtt of first sample
    next_seqn = 0  # incremented with each sent packet which was not a retransmit
    curr_acks = 0  # how many acks we've recieved for those sent in most recent window: [0, current_window]

    cwnd = 1
    current_window = 4
    packet_dropped = False

    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    # decide whether a packet needs to be retransmitted based on the estimated round trip time
    def check_timeouts(self):
        for k in self.awaiting_ack.keys():
            now = time.time()
            diff = now - self.awaiting_ack.get(k)
             
            if self.rtt_estimation == -1.0:
                retransmission_threshold = 2
            else:
                retransmission_threshold = 1.85 * self.rtt_estimation
            if diff > retransmission_threshold:
                self.log("FOR KEY: %s" % k)
                self.log("TIME DIFF: %s" % str(diff))
                self.retransmit(k)

    # retransmit the packet associated with the given seqn
    def retransmit(self, seqn):
        self.log("RETRANSMITTING seqnum '%s'" % str(seqn))
        self.send(self.packs.get(seqn))
        self.awaiting_ack[seqn] = time.time()
        self.packet_dropped = True
        return

    # perform congestion control and reset waiting flag if got all acks
    def adjust_window(self):
        self.cwnd = self.cwnd + 1 
        if self.curr_acks == self.current_window - 1:
            self.waiting = False
            self.curr_acks = 0

            if self.packet_dropped:
                self.cwnd = 1
                self.packet_dropped = False

            self.current_window = self.cwnd

        else:
            self.curr_acks += 1
        
    def run(self):
        
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            socks = select.select(sockets, [], [], 0.1)[0]

            # check for packet timeouts
            self.check_timeouts()

            for conn in socks:
                if conn == self.socket:
                    k, addr = conn.recvfrom(65535)

                    try:
                        msg = json.loads(k.decode('utf-8'))
                        acked_seqnum = msg["seqnum"]

                        if acked_seqnum in self.awaiting_ack:
                            self.log("Received message '%s'" % msg)
                            
                            # rtt of the packet which was acked
                            packet_rtt = time.time() - self.awaiting_ack.get(acked_seqnum)

                            # if rtt_estimation needs to be initialized to first sample
                            if self.rtt_estimation == -1.0:
                                self.rtt_estimation = packet_rtt
                            else: # else adjust moving average based on this sample
                                self.rtt_estimation = (ALPHA * self.rtt_estimation) + ((1 - ALPHA) * packet_rtt)

                            self.awaiting_ack.pop(acked_seqnum) 
                            self.adjust_window()

                    except JSONDecodeError:
                        self.log("JSON PACKAGE CORRUPTED ON SENDER SIDE")

                elif conn == sys.stdin:
                    for n in range(int(self.current_window)):
                        data = sys.stdin.read(DATA_SIZE)
                        
                        if len(data) == 0 and (len(self.awaiting_ack) == 0):
                            self.log("All done!")
                            sys.exit(0)

                        encoded_data = data.encode()
                        checksum = zlib.crc32(encoded_data)

                        msg = { "type": "msg", "seqnum": self.next_seqn, "checksum": checksum, "data": data}
                        self.log("Sending message '%s'" % msg)
                        self.send(msg)
                        self.awaiting_ack[self.next_seqn] = time.time() # store the time we sent this packet
                        self.packs[self.next_seqn] = msg  # store the message associated with this sequence number
                        self.next_seqn += 1  # increment sequence number to be assigned to next packet
                    
                    # after sending current_window packets, wait for acks
                    self.waiting = True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()